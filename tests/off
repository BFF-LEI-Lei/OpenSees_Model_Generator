"""
First test file.
This will be replaced with more appropriate test files in the future.
"""

import numpy as np
import pytest
from osmg import model


def test_first():
    # Simple 3-story 4-bay moment frame
    smrf_3_4 = model.Model()
    # smrf_3_4.add_level('base', 0.00, 'fixed')
    # smrf_3_4.add_level('1', 144.00)
    # smrf_3_4.add_level('2', 144.00*2)
    # smrf_3_4.add_level('3', 144.00*3)

    # smrf_3_4.set_active_material('steel-bilinear-fy50')
    # smrf_3_4.add_sections_from_json(
    #     "section_data/sections.json",
    #     'W',
    #     ["W24X94"])
    # smrf_3_4.set_active_section("W24X94")
    # smrf_3_4.set_active_levels("all_above_base")
    # smrf_3_4.active_placement = 'centroid'
    # smrf_3_4.set_active_section("W24X94")
    # p1 = np.array((0.00, 0.00))
    # p2 = np.array((360., 0.00))
    # p3 = np.array((360.*2., 0.00))
    # p4 = np.array((360.*3, 0.00))
    # smrf_3_4.active_angle = np.pi/2
    # for pt in [p1, p2, p3, p4]:
    #     smrf_3_4.add_column_at_point(
    #         pt,
    #         n_sub=4,
    #         geom_transf='Corotational',
    #         ends={'type': 'fixed', 'doubler plate thickness': 0.00})
    # smrf_3_4.active_placement = 'top_center'

    # smrf_3_4.active_angle = 0.00
    # for pair in ((p1, p2), (p2, p3), (p3, p4)):
    #     smrf_3_4.add_beam_at_points(
    #         pair[0], pair[1],
    #         n_sub=4,
    #         snap_i='bottom_center',
    #         snap_j='top_center')

    # from osmg import preprocess

    # # preprocess.diaphragms(smrf_3_4)
    # # preprocess.tributary_area_analysis(smrf_3_4)
    # # preprocess.self_weight_and_mass(smrf_3_4)

    # cam1 = dict(
    #     up=dict(x=0, y=0, z=1),
    #     center=dict(x=0.0, y=0, z=-0.30),
    #     eye=dict(x=0.00, y=0.1, z=-0.30),
    #     projection={
    #         "type": "perspective"
    #     }
    # )
    # cam2 = dict(
    #     up=dict(x=0, y=0, z=1),
    #     center=dict(x=0.0, y=0, z=0.00),
    #     eye=dict(x=0.00, y=4.0, z=0.00),
    #     projection={
    #         "type": "perspective"
    #     }
    # )

    # smrf_3_4.plot_building_geometry(extrude_frames=False, global_axes=True, frame_axes=False, camera=cam1)
    # smrf_3_4.plot_building_geometry(extrude_frames=True, global_axes=False, camera=cam2)


    # preprocess.model_steel_frame_panel_zones(smrf_3_4)


    # smrf_3_4.plot_building_geometry(extrude_frames=False, global_axes=True, frame_axes=False, camera=cam1)
    # smrf_3_4.plot_building_geometry(extrude_frames=True, global_axes=False, camera=cam2)


    # b = model.Model()
    # b.add_level('base', 0.00, 'fixed')
    # for i in range(3):
    #     b.add_level(str(i+1), 144.00*(i+1))
    # b.set_active_material('steel-bilinear-fy50')
    # b.add_sections_from_json(
    #     "section_data/sections.json",
    #     'W',
    #     ["W24X94"])
    # b.set_active_section("W24X94")
    # b.set_active_levels("all_above_base")
    # b.assign_surface_load(1.00)
    # b.active_placement = 'centroid'
    # b.set_active_section("W24X94")
    # p1 = np.array((0.00, 0.00))
    # p2 = np.array((360., 0.00))
    # p3 = np.array((360., 360.))
    # p4 = np.array((0.00, 360.00))
    # for pt in [p1, p2, p3, p4]:
    #     b.add_column_at_point(
    #         pt,
    #         n_sub=10,
    #         model_as={'type': 'fiber',
    #                  'n_x': 10,
    #                  'n_y': 10,
    #                  'n_p': 5})

    # b.active_placement = 'top_center'
    # for pair in ((p1, p2), (p2, p3), (p3, p4), (p4, p1)):
    #     b.add_beam_at_points(
    #         pair[0], pair[1],
    #         n_sub=10,
    #         model_as={'type': 'fiber',
    #                  'n_x': 10,
    #                  'n_y': 10,
    #                  'n_p': 5})
    # b.select_perimeter_beams_all()
    # b.selection.add_UDL(np.array((0.00, 0.00, -20.00)))
    # from osmg import preprocess
    # preprocess.diaphragms(b)
    # preprocess.tributary_area_analysis(b)
    # preprocess.self_weight_and_mass(b)


    # for node in b.list_of_parent_nodes():
    #     node.load += np.array([0.00, 0.00, 0.00, 0.00, 0.00, 0.00])

    # from osmg import solver

    # # instantiate analysis object
    # linear_gravity_analysis = solver.LinearGravityAnalysis(b)

    # linear_gravity_analysis.run()

    # # Displacement of the parent node of the top story,
    # # in the Y direction.
    # analysis_step = 0
    # direction = 1
    # node_id = b.list_of_parent_nodes()[-1].uid
    # linear_gravity_analysis.node_displacements[
    #     str(node_id)][analysis_step][direction]

    # linear_gravity_analysis.deformed_shape(extrude_frames=False)
    # linear_gravity_analysis.deformed_shape(extrude_frames=True)

    # linear_gravity_analysis.basic_forces()


    # modal_analysis = solver.ModalAnalysis(b, num_modes=3)
    # modal_analysis.run()

    # print(modal_analysis.periods)

    # modal_analysis.deformed_shape(step=0, scaling=0.00, extrude_frames=True)

    # pushover_analysis = solver.PushoverAnalysis(b)
    # control_node = b.list_of_all_nodes()[-1]  # top floor
    # analysis_metadata = pushover_analysis.run(
    #     "y",
    #     np.array([10.]),
    #     control_node,
    #     1./2.)
    # n_plot_steps = analysis_metadata['successful steps']


    # # plot the deformed shape for any of the steps
    # plot_metadata = pushover_analysis.deformed_shape(
    #     step=n_plot_steps-1, scaling=0.00, extrude_frames=True)
    # print(plot_metadata)

    # # plot pushover curve
    # pushover_analysis.plot_pushover_curve("y", control_node)

    # pushover_analysis.basic_forces(step=n_plot_steps-1)

    # nlth = solver.NLTHAnalysis(b)

    # nlth.plot_ground_motion('tests/groundmotions/1xa.txt', 0.005, plotly=True)

    # nlth.run(0.01,
    #          'tests/groundmotions/1xa.txt',
    #          'tests/groundmotions/1xa.txt',
    #          None, 0.005,
    #         damping={'type': 'rayleigh', 'ratio': 0.05, 'periods': [1.00, 0.30]},
    #         printing=False)

    # node = b.list_of_parent_nodes()[-1]  # top floor
    # nlth.plot_node_displacement_history(node, 0, plotly=True)
    # nlth.plot_node_displacement_history(node, 1, plotly=True)

    # nlth.deformed_shape(435, scaling=0.00, extrude_frames=True)
